# Shreyas Gokhale
# Edited on 19-12-2019


# We need turtlebot gazebo, teleop, bringup

# TODO: combine dockerfiles, add rosinstall file
# TODO: cleanup

FROM gazebo-base

COPY ./orchestrator.rosinstall /simulator/

RUN mkdir /simulator/catkin_ws/src -p \
  && cd /simulator/catkin_ws \
  && wstool init --shallow src /simulator/orchestrator.rosinstall 

COPY ./custom_catkin_packages  /simulator/catkin_ws/src/ 


RUN apt-get update \
    && apt-get install -y \
    ros-melodic-xacro \
    #ros-melodic-turtlebot3-description \
    ros-melodic-velodyne-description \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /simulator/catkin_ws

RUN /bin/bash -c "apt-get update && rosdep update\
    && rosdep install --from-paths src --ignore-src -y \
        --skip-keys=config_server --skip-keys=plot_msgs --skip-keys=catch_ros # ignore soft dependencies \
    && rm -rf /var/lib/apt/lists/*"


#Install rosdeps for turtlebot3 simulations
RUN /bin/bash -c "apt-get update && rosdep update\
    && rosdep install --from-paths     /simulator/catkin_ws/src/turtlebot3_simulations/  -y \
    && rm -rf /var/lib/apt/lists/*"


RUN /bin/bash -c "source /opt/ros/melodic/setup.bash \
     && catkin_make install"

ENV CATKIN_WS_PATH /simulator/catkin_ws

#ENV TURTLEBOT3_MODEL burger

# Useful for interactive bash, so that there is no need to set up workspace
RUN echo "source /simulator/catkin_ws/devel/setup.bash" 

RUN /bin/bash -c "source /opt/ros/melodic/setup.bash \
    && catkin_make install"


ENV DISPLAY :1
ENV DEBIAN_FRONTEND noninteractive



RUN apt-get update \
    && apt-get install -y xfce4 xfce4-goodies tightvncserver gettext-base \
    && rm -rf /var/lib/apt/lists/*

# project-specific commands
RUN apt-get update \
    && apt-get install -y \
        ros-melodic-rqt-gui-cpp \
        ros-melodic-turtlebot3-description \
        libqt4-dev \
        qt4-qmake \
        libyaml-cpp-dev \
        ros-melodic-tf2-msgs \
    && rm -rf /var/lib/apt/lists/*


#### Updated VNC by Shreyas
# There is no other easy way to add VNC to our image.
ENV DISPLAY=:1 \
    VNC_PORT=5901 \
    NO_VNC_PORT=6901
EXPOSE $VNC_PORT $NO_VNC_PORT


ENV HOME=/headless \
    TERM=xterm \
    STARTUPDIR=/dockerstartup \
    INST_SCRIPTS=/headless/install \
    NO_VNC_HOME=/headless/noVNC \
    DEBIAN_FRONTEND=noninteractive \
    VNC_COL_DEPTH=24 \
    VNC_RESOLUTION=1280x720 \
    VNC_PW=vncpassword \
    VNC_VIEW_ONLY=false
WORKDIR $HOME


### Add all install scripts for further steps
ADD ./vnc_files/common/install/ $INST_SCRIPTS/
ADD ./vnc_files/ubuntu/install/ $INST_SCRIPTS/
RUN find $INST_SCRIPTS -name '*.sh' -exec chmod a+x {} +

### Install some common tools
RUN $INST_SCRIPTS/tools.sh
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

### Install xvnc-server & noVNC - HTML5 based VNC viewer
RUN $INST_SCRIPTS/tigervnc.sh
RUN $INST_SCRIPTS/no_vnc.sh

### Install firefox and chrome browser
RUN $INST_SCRIPTS/chrome.sh

### Install xfce UI
RUN $INST_SCRIPTS/xfce_ui.sh
ADD ./vnc_files/common/xfce/ $HOME/

### configure startup
RUN $INST_SCRIPTS/libnss_wrapper.sh
ADD ./vnc_files/common/scripts $STARTUPDIR
RUN $INST_SCRIPTS/set_user_permission.sh $STARTUPDIR $HOME

ENTRYPOINT ["/dockerstartup/vnc_startup.sh"]